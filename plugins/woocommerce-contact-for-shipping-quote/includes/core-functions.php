<?php
namespace WooCommerce_Contact_for_Shipping_Quote;

if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly


/**
 * Enqueue scripts.
 *
 * Enqueue script as javascript and style sheets.
 *
 * @since  1.0.0
 */
function enqueue_scripts() {
	wp_register_style( 'woocommerce-contact-for-shipping-quote', plugins_url( 'assets/front-end/css/style.min.css', \WooCommerce_Contact_for_Shipping_Quote\WooCommerce_Contact_For_Shipping_Quote()->file ), array(), \WooCommerce_Contact_for_Shipping_Quote\WooCommerce_Contact_For_Shipping_Quote()->version );
	wp_register_script( 'woocommerce-contact-for-shipping-quote', plugins_url( 'assets/front-end/js/main.js', \WooCommerce_Contact_for_Shipping_Quote\WooCommerce_Contact_For_Shipping_Quote()->file ), array( 'jquery' ), \WooCommerce_Contact_for_Shipping_Quote\WooCommerce_Contact_For_Shipping_Quote()->version, true );

	wp_localize_script( 'woocommerce-contact-for-shipping-quote', 'wccsq', array(
		'ajaxurl' => admin_url( 'admin-ajax.php' ),
		'nonce'   => wp_create_nonce( 'contact-for-shipping-quote' ),
		'is_cart' => is_cart(),
	) );

	if ( is_cart() || is_checkout() ) {
		wp_enqueue_style( 'woocommerce-contact-for-shipping-quote' );
		wp_enqueue_script( 'woocommerce-contact-for-shipping-quote' );
	}
}
add_action( 'wp_enqueue_scripts', 'WooCommerce_Contact_for_Shipping_Quote\enqueue_scripts' );


/**
 * Get minimalistic cart data.
 *
 * Get a minimalistic set of cart data to store with the shipping quote.
 * We don't want to store a ton of data, so only store the data needed to provide a shipping quote.
 *
 * @since 1.0.0
 *
 * @param null $cart
 * @return array|null
 */
function get_cart_data( $cart = null ) {
	if ( empty( $cart ) ) {
		$cart = WC()->cart->get_cart_contents();
	}

	// Keys of cart item data to store in quote data
	$keys = apply_filters( 'WCCSQ/cart_item_data_keys', array(
		'product_id',
		'variation_id',
		'variation',
		'quantity',
		'name',
		'line_total',
		'line_tax',
		'pricing_item_meta_data', // Measurement Price Calculator
		'bundled_items', // Bundles
		'stamp', // Bundles
	), $cart );

	$values = $cart;
	array_walk( $values, function( &$item ) use ( $keys ) {
		$item['name'] = $item['data']->get_title();
		$item = array_intersect_key( $item, array_flip( $keys ) );

		// Make sure precision is always the same.
		$item = array_map( function( $value ) {
			return is_float( $value ) ? number_format( $value, 2, '.', '' ) : $value;
		}, $item );
	} );

	return apply_filters( 'WCCSQ/get_cart_data', array_values( $values ), $cart );
}


/**
 * Get the cart hash.
 *
 * Get a hash generated by the cart for easy validation in the database for a existing shipping quote.
 * Hash is based on product ID, variation ID, variation data and quantity.
 *
 * @since 1.0.0
 *
 * @param array $cart Cart items.
 * @return string Hashed cart.
 */
function get_cart_hash( $cart = null ) {
	$hash = md5( json_encode( get_cart_data( $cart ) ) );

	return apply_filters( 'WCCSQ/get_cart_hash', $hash, $cart );
}


/**
 * Get address data.
 *
 * Get the customer address data.
 *
 * @since 1.0.0
 *
 * @param array|null $address Customer address - can be partial values.
 * @return array Customer address.
 */
function get_address_data( $address = null ) {
	$post_data = isset( $_POST['post_data'] ) ? wp_unslash( $_POST['post_data'] ) : ( isset( $_POST['billing_email'] ) ? $_POST : '' );

	if ( is_null( $address ) ) {
		$post_data = wp_parse_args( $post_data, array(
			'shipping_country'   => null,
			'shipping_state'     => null,
			'shipping_postcode'  => null,
			'shipping_city'      => null,
			'shipping_address_1' => null,
			'shipping_address_2' => null,
			'billing_country'    => null,
			'billing_state'      => null,
			'billing_postcode'   => null,
			'billing_city'       => null,
			'billing_address_1'  => null,
			'billing_address_2'  => null
		) );

		$address = wc_clean( array(
			'country'   => isset( $post_data['ship_to_different_address'] ) ? $post_data['shipping_country'] : ( $post_data['billing_country'] ?: WC()->customer->get_shipping_country() ),
			'postcode'  => isset( $post_data['ship_to_different_address'] ) ? $post_data['shipping_postcode'] : ( $post_data['billing_postcode'] ?: WC()->customer->get_shipping_postcode() ),
			'city'      => isset( $post_data['ship_to_different_address'] ) ? $post_data['shipping_city'] : ( $post_data['billing_city'] ?: WC()->customer->get_shipping_city() ),
			'address_1' => isset( $post_data['ship_to_different_address'] ) ? $post_data['shipping_address_1'] : ( $post_data['billing_address_1'] ?: WC()->customer->get_shipping_address_1() ),
			'address_2' => isset( $post_data['ship_to_different_address'] ) ? $post_data['shipping_address_2'] : ( $post_data['billing_address_2'] ?: WC()->customer->get_shipping_address_2() ),
		) );
	}

	// Ensure all required fields are present
	$address = wp_parse_args(
		$address,
		array( 'country' => null, 'state' => null, 'postcode' => null, 'city' => null, 'address_1' => '', 'address_2' => '' )
	);

	if ( ! empty( WC()->countries->get_states( $address['country'] ) ) ) {
		$address['state'] = isset( $post_data['ship_to_different_address'] ) ? $post_data['shipping_state'] : ( $post_data['billing_state'] ?: WC()->customer->get_shipping_state() );
	}

	return apply_filters( 'WCCSQ/get_address_data', wc_clean( $address ) );
}


/**
 * Get checkout value.
 *
 * Get the value from the checkout based on whether the 'ship to different address'
 * is used / if the value is available (fallback to billing field).
 *
 * @since 1.3.0
 *
 * @param  string $key Field key to get the value for.
 * @return mixed       Field value when available.
 */
function get_value_for_quote( $key ) {
	if ( true == WC()->checkout()->get_value( 'ship_to_different_address' ) ) {
		$value = WC()->checkout()->get_value( 'shipping_' . $key );

		if ( empty( $value ) ) {
			$value = WC()->checkout()->get_value( 'billing_' . $key );
		}
	} else {
		$value = WC()->checkout()->get_value( 'billing_' . $key );
	}

	return $value;
}


/**
 * Get address hash.
 *
 * Get a hash specific to a address.
 *
 * @since 1.0.0
 *
 * @param array|null $address Address to hash. Leave empty to use checkout values.
 * @return string Address hash.
 */
function get_address_hash( $address = null ) {
	$address = get_address_data( $address );

	$hash = md5( json_encode( $address ) );

	return apply_filters( 'WCCSQ/get_address_hash', $hash, $address );
}


/**
 * Cart/customer recovery.
 *
 * Recover the cart items / customer address from a quote.
 *
 * @since 1.1.0
 */
function check_cart_recovery_action() {
	if ( ! isset( $_GET['action'], $_GET['quote'], $_GET['key'] ) || $_GET['action'] !== 'complete-quote' ) {
		return;
	}

	$quote_key = wc_clean( $_GET['key'] );
	$quote_id = absint( $_GET['quote'] );

	if ( ! $quote = get_shipping_quote( $quote_id ) ) {
		return;
	}

	$key_check = md5( $quote->get_cart_hash() . $quote->get_address_hash() );
	if ( $key_check !== $quote_key ) {
		return;
	}

	if ( ( ! isset( $_GET['force'] ) || $_GET['force'] != 1 ) && WC()->cart->get_cart_contents_count() !== 0 && get_cart_hash() !== $quote->get_cart_hash() ) {
		wc_add_notice(
			__( 'Your current cart is different from the items in the shipping quote.', 'woocommerce-contact-for-shipping-quote' ) .
			' <a href="' . esc_url( add_query_arg( 'force', 1, $quote->get_cart_recover_url() ) ) . '">' . __( 'Recover items from shipping quote.', 'woocommerce-contact-for-shipping-quote' ) . '</a>' );
		return;
	}

	// Set default rate to the first Quote option. Required to be above recover functions (don't know why exactly).
	add_filter( 'woocommerce_shipping_chosen_method', '\WooCommerce_Contact_for_Shipping_Quote\change_default_chosen_method', 10, 3 );

	// Recover the cart
	$quote->recover_cart();
	$quote->recover_customer();

	// Calculate shipping in order to trigger the default selection
	WC()->cart->calculate_shipping();

	do_action( 'WCCSQ/recovered_quote', $quote );

	// Redirect after recovery
	wp_redirect( esc_url_raw( wc_get_cart_url() ) );
	die;
}
add_action( 'wp', '\WooCommerce_Contact_for_Shipping_Quote\check_cart_recovery_action' );
